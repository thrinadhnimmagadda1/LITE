import React, { useMemo } from 'react';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

// Custom plugin to display the value on top of each bar
const valueOnTopPlugin = {
  id: 'valueOnTop',
  afterDatasetsDraw(chart) {
    const { ctx } = chart;
    
    chart.data.datasets.forEach((dataset, i) => {
      const meta = chart.getDatasetMeta(i);
      if (!meta.hidden) {
        meta.data.forEach((bar, index) => {
          const data = dataset.data[index];
          const total = chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
          const percentage = Math.round((data / total) * 100);
          
          ctx.fillStyle = '#374151';
          const fontSize = 12;
          const fontStyle = 'normal';
          const fontFamily = 'sans-serif';
          ctx.font = `${fontStyle} ${fontSize}px ${fontFamily}`;
          
          const text = `${data} (${percentage}%)`;
          const textWidth = ctx.measureText(text).width;
          
          ctx.textAlign = 'center';
          ctx.textBaseline = 'bottom';
          
          const x = bar.x;
          const y = bar.y - 5; // Position above the bar
          
          // Draw text with a white background for better visibility
          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
          const padding = 4;
          ctx.fillRect(
            x - textWidth / 2 - padding,
            y - fontSize - padding * 2,
            textWidth + padding * 2,
            fontSize + padding * 2
          );
          
          // Draw the text
          ctx.fillStyle = '#374151';
          ctx.fillText(text, x, y);
        });
      }
    });
  },
};

const ClustersChart = ({ items = [] }) => {
  // Process cluster data
  const { sortedClusters, totalPapers } = useMemo(() => {
    const counts = {};
    let total = 0;
    
    if (Array.isArray(items)) {
      items.forEach(item => {
        if (!item) return;
        
        const clusterId = item.cluster !== undefined ? item.cluster : 
                         (item.Cluster !== undefined ? item.Cluster : -1);
        
        const clusterKey = `Cluster ${clusterId}`;
        counts[clusterKey] = (counts[clusterKey] || 0) + 1;
        total++;
      });
    }
    
    const sorted = Object.entries(counts).length > 0 
      ? Object.entries(counts).sort((a, b]) => a[0].localeCompare(b[0]))
      : [['No Data', 0]];
    
    return {
      sortedClusters: sorted,
      totalPapers: total || 1
    };
  }, [items]);

  // Generate colors based on the number of clusters
  const generateColors = (count) => {
    const colors = [
      'rgba(54, 162, 235, 0.7)',
      'rgba(255, 99, 132, 0.7)',
      'rgba(255, 159, 64, 0.7)',
      'rgba(75, 192, 192, 0.7)',
      'rgba(153, 102, 255, 0.7)',
      'rgba(255, 205, 86, 0.7)',
      'rgba(201, 203, 207, 0.7)',
      'rgba(255, 99, 71, 0.7)',
      'rgba(60, 179, 113, 0.7)',
      'rgba(147, 112, 219, 0.7)'
    ];
    
    return colors.slice(0, Math.max(1, count));
  };

  const chartData = {
    labels: sortedClusters.map(([cluster]) => cluster),
    datasets: [
      {
        label: 'Number of Papers',
        data: sortedClusters.map(([_, count]) => count),
        backgroundColor: generateColors(sortedClusters.length),
        borderColor: 'rgba(0, 0, 0, 0.1)',
        borderWidth: 1,
        borderRadius: 4,
        hoverBackgroundColor: generateColors(sortedClusters.length).map(color => 
          color.replace('0.7', '1')
        ),
      },
    ]
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
      title: {
        display: true,
        text: 'Paper Clusters Distribution',
        font: {
          size: 18,
          weight: 'bold',
          family: 'Inter, sans-serif',
        },
        color: '#1F2937',
        padding: {
          top: 10,
          bottom: 20,
        },
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        titleFont: {
          size: 14,
          weight: 'bold',
        },
        bodyFont: {
          size: 13,
        },
        padding: 12,
        cornerRadius: 8,
        callbacks: {
          label: (context) => {
            const label = context.label || '';
            const value = context.raw || 0;
            const total = context.dataset.data.reduce((a, b) => a + b, 0);
            const percentage = Math.round((value / total) * 100);
            return [
              `Cluster: ${label}`,
              `Papers: ${value}`,
              `Percentage: ${percentage}%`
            ];
          },
        },
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        title: {
          display: true,
          text: 'Number of Papers',
          font: {
            weight: '600',
          },
          color: '#4B5563',
        },
        grid: {
          display: true,
          drawBorder: false,
          color: 'rgba(0, 0, 0, 0.04)',
        },
        ticks: {
          stepSize: 1,
          precision: 0,
          font: {
            size: 12,
          },
          color: '#6B7280',
        },
      },
      x: {
        title: {
          display: true,
          text: 'Cluster Groups',
          font: {
            weight: '600',
          },
          color: '#4B5563',
          padding: { top: 10 },
        },
        grid: {
          display: false,
        },
        ticks: {
          font: {
            size: 12,
          },
          color: '#6B7280',
        },
      },
    },
    animation: {
      duration: 1000
    }
  };

  if (!Array.isArray(items) || items.length === 0) {
    return (
      <div className="w-full bg-white rounded-lg shadow p-6">
        <div className="h-96 flex items-center justify-center">
          <p className="text-gray-500">No cluster data available</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full bg-white rounded-lg shadow-lg overflow-hidden">
      <div className="p-6">
        <h2 className="text-xl font-bold text-gray-800 mb-2">Paper Clusters</h2>
        <p className="text-gray-500 text-sm mb-6">
          Distribution of papers across different topic clusters
        </p>
        <div className="h-80">
          <Bar 
            data={chartData} 
            options={chartOptions}
            plugins={[valueOnTopPlugin]}
          />
        </div>
        <div className="mt-4 text-sm text-gray-500 text-right">
          <span className="font-medium">Total papers:</span> {totalPapers}
        </div>
      </div>
      
      {sortedClusters.length > 0 && sortedClusters[0][0] !== 'No Data' && (
        <div className="bg-gray-50 px-6 py-4 border-t border-gray-100">
          <h4 className="text-sm font-medium text-gray-700 mb-2">Cluster Legend</h4>
          <div className="flex flex-wrap gap-2">
            {sortedClusters.map(([cluster, count], index) => {
              const colors = generateColors(sortedClusters.length);
              const bgColor = colors[index % colors.length];
              return (
                <div key={`${cluster}-${index}`} className="flex items-center text-xs">
                  <span 
                    className="w-3 h-3 rounded-sm mr-1.5" 
                    style={{ backgroundColor: bgColor }}
                  />
                  <span className="text-gray-600">
                    {cluster}: {count} papers ({
                      Math.round((count / totalPapers) * 100)
                    }%)
                  </span>
                </div>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
};

export default ClustersChart;
